{% extends 'layout/base.twig' %}

{% block head %}
<link href="{{ static('css/d3.flameGraph.css') }}" rel="stylesheet" media="screen">
{% endblock %}

{% block title %}
- Flamegraph - {{ profile.meta.url }} - {{ profile.meta('SERVER.REQUEST_TIME')|date(date_format) }}
{% endblock %}

{% block content %}
<div class="row-fluid">
    <a class="back-link" href="{{ url('run.view', {'id': profile.id|trim}) }}">&laquo; Back to run</a>
    <h1>Flamegraph for {{ profile.meta.url }}</h1>
    <h4>{{ profile.meta('SERVER.REQUEST_TIME')|date(date_format) }}</h4>
</div>

<div class="row-fluid">
<form class="search-form form-inline" id="form">
	<div class="control-group span8">
		<a class="btn" id="flamegraph-reset">Reset zoom</a>
	</div>
	<div class="control-group span4">
		<input type="text" class="form-control" id="term">
		<button class="btn btn-primary" id="flamegraph-search">Search</button>
        <button class="btn" id="flamegraph-clear">Clear</button>
        {% if threshold!=-1 %}
            <button class="btn" id="flamegraph-all">看所有的</button>
        {% else %}
            <button class="btn" id="flamegraph-threshold">只看大于1%的数据</button>
        {% endif %}
	</div>
</form>
</div>

<div class="row-fluid">
    <div id="chart"></div>
</div>

<div class="alert alert-info">
    Flamegraphs help visualize where long running methods are, as well as methods
    that have deep call stacks.
</div>
{% endblock %}


{% block jsfoot %}
<script src="{{ static('js/d3-tip-index.js') }}"></script>
<script src="{{ static('js/d3.flameGraph.js') }}"></script>
<script type="text/javascript">

var width = parseInt($('#chart').css('width'), 10);
var cellHeight = 18;

var flameGraph = d3.flameGraph()
    .height(540)
    .width(width)
    .cellHeight(cellHeight)
    .transitionDuration(750)
    .transitionEase('cubic-in-out')
    .sort(true);

var tip = d3.tip()
    .direction("s")
    .offset([8, 0])
    .attr('class', 'd3-flame-graph-tip')
    .html(function(d) {
        var units = 'µs';
        return d.name + " &mdash; " + Xhgui.formatNumber(d.value) + units + ' (' + Math.round(100 * d.dx, 3) + '%)';
    });

flameGraph.tooltip(tip);
d3.json("{% autoescape false %}{{ get_data_url }}{% endautoescape %}", function(error, data) {
    if (error) {
        return console.warn(error);
    }
    flameGraph.height(getDepth(data.data) * cellHeight);

    flameGraph.sort(function (a, b) {
        return data.sort[a.name] - data.sort[b.name];
    });

    d3.select("#chart")
        .datum(data.data)
        .call(flameGraph);
});

$(document).ready(function(){
    $("form").submit(function(event){
        event.preventDefault();
        flameGraph.search($('#term').val());
    });

    $('#flamegraph-all').on('click', function (e){
        window.location.href=getCurUrl(-1);
    });

    $('#flamegraph-threshold').on('click', function (e){
        window.location.href=getCurUrl(0.01);
    });
});

$('#flamegraph-search').on('click', function () {
    flameGraph.search($("#term").val());
});

$('#flamegraph-clear').on('click', function() {
    $('#term').val('');
    flameGraph.clear();
});

$('#flamegraph-reset').on('click', function () {
    flameGraph.resetZoom();
});

function getDepth (obj) {
    var depth = 0;
    if (obj.children) {
        obj.children.forEach(function (d) {
            var tmpDepth = getDepth(d)
            if (tmpDepth > depth) {
                depth = tmpDepth
            }
        })
    }
    return 1 + depth
}

function getCurUrl(threshold){
    var returnUrl='';
    var url = window.location.href;
    var nurl = parseURL(url);
    if(threshold<0){
        returnUrl = nurl.path+'?'+'id='+nurl.params.id+"&threshold=-1";
    } else {
        returnUrl = nurl.path+'?'+'id='+nurl.params.id;
    }
    return returnUrl;
}

function parseURL(url) {
    var a = document.createElement('a');
    a.href = url;
    return {
        source: url,
        protocol: a.protocol.replace(':', ''),
        host: a.hostname,
        port: a.port,
        query: a.search,
        params: (function () {
            var ret = {},
                    seg = a.search.replace(/^\?/, '').split('&'),
                    len = seg.length, i = 0, s;
            for (; i < len; i++) {
                if (!seg[i]) {
                    continue;
                }
                s = seg[i].split('=');
                ret[s[0]] = s[1];
            }
            return ret;
        })(),
        file: (a.pathname.match(/\/([^\/?#]+)$/i) || [, ''])[1],
        hash: a.hash.replace('#', ''),
        path: a.pathname.replace(/^([^\/])/, '/$1'),
        relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ''])[1],
        segments: a.pathname.replace(/^\//, '').split('/')
    };
}

</script>
{% endblock %}
